import { Component, createMemo, For, Index, Show } from 'solid-js'
import shuffle from 'lodash.shuffle'
import { GraphDisplayer, MachineBox } from '../graph.civet'
import { pseudoRandom, replicate } from '../util.civet'

type BoxProps =
  displayer: GraphDisplayer
  colors: string[]
  idx: number
  box: MachineBox

const Box: Component<BoxProps> = (props) =>
  position := createMemo => props.displayer.position props.idx
  label := => props.displayer.vertexLabel(props.idx)
  balls := createMemo => shuffle(props.box.flatMap(({nbBalls, edge}) => replicate nbBalls, edge))
  height := =>  Math.min(95, balls().length)
  segments := =>
    segs := []
    total := props.box.reduce (acc, {nbBalls}) => acc+nbBalls, 0 
    psum .= 0
    for {nbBalls, edge} of props.box
      segs.push {begin: psum / total, end: (psum+nbBalls)/total, edge}
      psum += nbBalls
    segs

  <Show when=position()>
    <g style={
      transform: `translate(${position()!.x}px, ${position()!.y}px)`
    }>
      <path
        d="M1 1 L10 109 L90 109 L99 1"
        stroke-width="3.0"
        stroke="#000"
        fill="transparent"
      />
      <For each=balls()>
        {(color, i) =>
          <circle
            cx={15 + pseudoRandom(props.idx + i()) * 71}
            cy={100 - pseudoRandom(10 + props.idx + i()) * height()}
            r="5"
            fill={props.colors[color]}
          />
        }
      <Index each=segments()>
        {(seg) =>
          <rect
            x={3.0 + 94.0 * seg().begin}
            y="115"
            width={94.0 * (seg().end - seg().begin)}
            height="20"
            stroke="black"
            fill={props.colors[seg().edge]}
          />
        }
      <Show when=label()>
        <text x="50" y="150">{label()}</text>

export default Box