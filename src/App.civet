import { createMemo, Component, batch } from 'solid-js'
import { createStore, produce, SetStoreFunction } from "solid-js/store"
import { nimDisplayer, kingDisplayer, randomPlays, expertPlays, machinePlays, graphToMachine } from './graph.civet'
import { Config, getGraph, initMachine, State } from './model.civet'
import Card from './components/Card.civet'
import ConfigView from './components/Config.civet'
import Legend from './components/Legend.civet'
import Score from './components/Score.civet'
import MachineView from './components/Machine.civet'
import { createTimer } from '@solid-primitives/timer'

baseColors: string[] := [
  "#f6b73c", // yellow
  "#ff0000", // red
  "#00ffff", // cyan
  "#90ee90", // light green 
  "#900090", // magenta" 
]

initConfig: Config :=
  graphType: {type: "nim", size: 8, moves: [ 1, 2 ]}
  adversary: 'random'
  ballsPerColor: 6
  reward: 3
  penalty: -1
  machineStarts: true

initState: State := initMachine
  config: initConfig
  victories: 0
  losses: 0
  machine: []
  isRunning: false
  colors: baseColors
  fastMode: false

App: Component := =>
  // state
  [state, setState] := createStore initState

  // derived
  source := =>
    graphType := state.config.graphType
    if graphType.type === "nim"
      graphType.size
    else
      graphType.width * graphType.height - 1

  displayer := createMemo =>
    graphType := state.config.graphType
    if graphType.type === "nim"
      nimDisplayer graphType.moves
    else
      kingDisplayer graphType.width, graphType.height

  losingPositions := createMemo =>
    n := state.machine.length
    positions: boolean[] := new Array(n)
    for i .= 0; i < n; i++
      positions[i] = state.machine[i].every ({dest}) => !positions[dest]
    positions

  const adversaryPlays = (pos: number) =>
    switch state.config.adversary
      case "random": return randomPlays(state.machine, pos)
      case "expert": return expertPlays(state.machine, losingPositions(), pos)
      case "machine": return machinePlays(state.machine, pos)

  // actions
  runGame := =>
    isMachineTurn .= state.config.machineStarts
    pos .= source()
    // simule une partie et place la liste des coups jouÃ©s dans moves
    moves: {pos: number, edge: number, isMachineTurn: boolean}[] := []
    while true
      move := isMachineTurn ? machinePlays(state.machine, pos) : adversaryPlays(pos)
      if move === null
        break
      moves.push {pos, edge: move.edge, isMachineTurn}
      isMachineTurn = !isMachineTurn
      pos = move.dest
    win := isMachineTurn
    
    setState produce (state) =>
      if win
        state.victories++
      else
        state.losses++
      // ajuste les billes
      for {pos, edge, isMachineTurn} of moves
        box := state.machine[pos]
        i := box.findIndex &.edge === edge
        box[i].nbBalls = Math.max(0,
          box[i].nbBalls + (
            if !isMachineTurn && state.config.adversary !== "machine"
            then 0
            else if win === isMachineTurn
            then state.config.reward
            else state.config.penalty
          ) 
        )
      // si il n'y a plus de billes dans un casier, on en remet
      n := state.machine.length
      for i .= 0; i < n; i++
        if state.machine[i].every ({nbBalls}) => nbBalls === 0
          const m = state.machine[i].length;
          for j .= 0; j < m; j++
            state.machine[i][j].nbBalls = state.config.ballsPerColor
  
  createTimer runGame, => state.isRunning && (state.fastMode ? 100 : 500), setInterval

  changeConfig: SetStoreFunction<Config> := (...args: any[]) =>
    batch =>
      (setState as any)("config", ...args)
      setState produce (state) =>
        state.victories = 0
        state.losses = 0
        state.isRunning = false
        const graph = getGraph(state)
        state.machine = graphToMachine(graph, state.config.ballsPerColor)

  setColor := (idx: number, color: string) =>
    setState "colors", idx, color

  startMachine := => setState "isRunning", true
  stopMachine := => setState "isRunning", false

  setFastMode := (fastMode: boolean) =>
    setState "fastMode", fastMode

  actions := {
    changeConfig
    startMachine
    stopMachine
    setFastMode
  }

  <div class="w-screen flex flex-row justify-around items-start">
    <Card title="Visualisation de la machine">
      <div class="flex flex-col">
        <MachineView
          displayer=displayer()
          colors=state.colors
          machine=state.machine
        />
        <Score victories={state.victories} losses={state.losses}/>
    <Legend legend={displayer().legend} colors={state.colors} setColor={setColor}/>
    <ConfigView config={state.config} isRunning={state.isRunning} {...actions}/>

export default App